just do haskell wholemeal coding from now on

wordsWhen p s =  case dropWhile p s of
                      "" -> []
                      s' -> w : wordsWhen p s''
                            where (w, s'') = break p s'

splitcomma = wordsWhen (==',')

gm_CSV fileName = do
    fileText <- readFile fileName
    return $ ((map splitcomma) . lines)  fileText

================================================
You can use zip to provide items with indexes:

Prelude> zip "asdf" [0..]
[('a',0),('s',1),('d',2),('f',3)]
================================================



mapM_ print  [((r,c),v) | r <-[1..20],c<-[1..14],v<-[0..2]]

 print $ sum $ map (\(_,y,z) -> y*z) [("A",100,2),("B",50,3)]
-- count x = length . filter ((== x) . fst)

 print $ sum $ map  (\((r,c),v)-> v) [((1,1),3),((1,1),0)]
 
 print $ length $ filter (\((r,c),v)-> r==1 && v==3)  [((1,1),3),((2,1),3)]   -- ==> length of filter is a count !!!

